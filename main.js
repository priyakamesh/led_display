
//initializing an array
var array = [];


function getInput() {
   var input = document.getElementById('input').value.toUpperCase();


    for (var i = 0; i < input.length; i++) {
      var asciiCode = '';
      asciiCode = input[i].charCodeAt(0);
      // will get array of hexadecimal values of size 6
      var alphabetHexArray = hexFont[asciiCode - 32]
      console.log("alphabetHexArray.length",alphabetHexArray.length);
      for( var j = 0 ; j < alphabetHexArray.length; j++){
        //conversion of hexadecimal value to binary code
        var binaryCode = alphabetHexArray[j].toString(2)
        console.log("binaryCode",binaryCode);
    //trying to map the 6 binary codes of an alphabet to fill colors to the
    //corresponding matrix position when binary code is 1.
         ctx.fillStyle = 'blue';

           ctx.fillRect(0,0,10,10)
           ctx.fillRect(10,0,10,10)
           ctx.fillRect(20,0,10,10)
           ctx.fillRect(0,10,10,10)
           ctx.fillRect(0,20,10,10)
           ctx.fillRect(0,30,10,10)
           ctx.fillRect(20,10,10,10)
           ctx.fillRect(20,20,10,10)
           ctx.fillRect(20,30,10,10)
           ctx.fillRect(10,20,10,10)
      }
   }
   // array = asciiCode.split(" ")
   // array.pop()
   // console.log("array",array);
   var result = array.map((num) =>{
    if(num > 31) {
      return String.fromCharCode(parseInt(num))
    }

   })
   document.getElementById("output").innerHTML = result.join("")




// draw letters using canvas, now only A letter is drawn.
  var canvas = document.getElementById("myCanvas");
   var ctx = canvas.getContext("2d");
   ctx.fillStyle = "white";
   ctx.fillRect(0, 0, 1200, 160);
   ctx.fillStyle = "white";
   ctx.font = "40px Georgia";
   var input1 = typeof input
   console.log("input",input1);
   ctx.fillText(input, 75,100)
    ctx.textAlign = "center";
//drawing graph using canvas
    for(var i = 10; i <= 160; i=i+10) {

      ctx.moveTo(0, i);
      ctx.lineTo(1200,i);
      ctx.stroke();
    }
    for(var i = 10; i <= 1200; i=i+10) {

      ctx.moveTo(i, 0);
      ctx.lineTo(i,160);
      ctx.stroke();
    }
    ctx.fillStyle = 'blue';

       ctx.fillRect(0,0,10,10)
       ctx.fillRect(10,0,10,10)
       ctx.fillRect(20,0,10,10)
       ctx.fillRect(0,10,10,10)
       ctx.fillRect(0,20,10,10)
       ctx.fillRect(0,30,10,10)
       ctx.fillRect(20,10,10,10)
       ctx.fillRect(20,20,10,10)
       ctx.fillRect(20,30,10,10)
       ctx.fillRect(10,20,10,10)
//trying to get image data from the canvas, it can be used to extract binary code from the 5 x 5 matrix
   var imgData = ctx.getImageData(0,0,30,40);
   console.log("imgData",imgData);
}

//hexadecimal value for fonts
var hexFont = [
  [0x00,0x00,0x00,0x00,0x00,0x00], //
  [0x5c,0x00,0x00,0x00,0x00,0x00], // !
  [0x06,0x00,0x06,0x00,0x00,0x00], // "
  [0x28,0x7c,0x28,0x7c,0x28,0x00], // #
  [0x5c,0x54,0xfe,0x54,0x74,0x00], // $
  [0x44,0x20,0x10,0x08,0x44,0x00], // %
  [0x28,0x54,0x54,0x20,0x50,0x00], // &
  [0x06,0x00,0x00,0x00,0x00,0x00], // '
  [0x38,0x44,0x00,0x00,0x00,0x00], // (
  [0x44,0x38,0x00,0x00,0x00,0x00], // )
  [0x02,0x07,0x02,0x00,0x00,0x00], // *
  [0x10,0x10,0x7c,0x10,0x10,0x00], // +
  [0xc0,0x00,0x00,0x00,0x00,0x00], // ,
  [0x10,0x10,0x10,0x10,0x10,0x00], // -
  [0x40,0x00,0x00,0x00,0x00,0x00], // .
  [0x60,0x10,0x0c,0x00,0x00,0x00], // /
  [0x7c,0x64,0x54,0x4c,0x7c,0x00], // 0
  [0x48,0x7c,0x40,0x00,0x00,0x00], // 1
  [0x64,0x54,0x54,0x54,0x48,0x00], // 2
  [0x44,0x54,0x54,0x54,0x6c,0x00], // 3
  [0x3c,0x20,0x70,0x20,0x20,0x00], // 4
  [0x5c,0x54,0x54,0x54,0x24,0x00], // 5
  [0x7c,0x54,0x54,0x54,0x74,0x00], // 6
  [0x04,0x04,0x64,0x14,0x0c,0x00], // 7
  [0x7c,0x54,0x54,0x54,0x7c,0x00], // 8
  [0x5c,0x54,0x54,0x54,0x7c,0x00], // 9
  [0x44,0x00,0x00,0x00,0x00,0x00], // :
  [0xc4,0x00,0x00,0x00,0x00,0x00], // ;
  [0x10,0x28,0x44,0x00,0x00,0x00], // <
  [0x28,0x28,0x28,0x28,0x28,0x00], // =
  [0x44,0x28,0x10,0x00,0x00,0x00], // >
  [0x08,0x04,0x54,0x08,0x00,0x00], // ?
  [0x7c,0x44,0x54,0x54,0x5c,0x00], // @
  [0x7c,0x24,0x24,0x24,0x7c,0x00], // A
  [0x7c,0x54,0x54,0x54,0x6c,0x00], // B
  [0x7c,0x44,0x44,0x44,0x44,0x00], // C
  [0x7c,0x44,0x44,0x44,0x38,0x00], // D
  [0x7c,0x54,0x54,0x54,0x44,0x00], // E
  [0x7c,0x14,0x14,0x14,0x04,0x00], // F
  [0x7c,0x44,0x44,0x54,0x74,0x00], // G
  [0x7c,0x10,0x10,0x10,0x7c,0x00], // H
  [0x44,0x44,0x7c,0x44,0x44,0x00], // I
  [0x60,0x40,0x40,0x44,0x7c,0x00], // J
  [0x7c,0x10,0x10,0x28,0x44,0x00], // K
  [0x7c,0x40,0x40,0x40,0x40,0x00], // L
  [0x7c,0x08,0x10,0x08,0x7c,0x00], // M
  [0x7c,0x08,0x10,0x20,0x7c,0x00], // N
  [0x38,0x44,0x44,0x44,0x38,0x00], // O
  [0x7c,0x14,0x14,0x14,0x08,0x00], // P
  [0x3c,0x24,0x64,0x24,0x3c,0x00], // Q
  [0x7c,0x14,0x14,0x14,0x68,0x00], // R
  [0x5c,0x54,0x54,0x54,0x74,0x00], // S
  [0x04,0x04,0x7c,0x04,0x04,0x00], // T
  [0x7c,0x40,0x40,0x40,0x7c,0x00], // U
  [0x0c,0x30,0x40,0x30,0x0c,0x00], // V
  [0x3c,0x40,0x30,0x40,0x3c,0x00], // W
  [0x44,0x28,0x10,0x28,0x44,0x00], // X
  [0x0c,0x10,0x60,0x10,0x0c,0x00], // Y
  [0x44,0x64,0x54,0x4c,0x44,0x00], // Z
  [0x7c,0x44,0x00,0x00,0x00,0x00], // [
  [0x0c,0x10,0x60,0x00,0x00,0x00], // "\"
  [0x44,0x7c,0x00,0x00,0x00,0x00], // ]
  [0x00,0x01,0x00,0x01,0x00,0x00], // ^
  [0x40,0x40,0x40,0x40,0x40,0x40], // _
  [0x00,0x01,0x00,0x00,0x00,0x00], // `
  [0x7c,0x24,0x24,0x24,0x7c,0x00], // a
  [0x7c,0x54,0x54,0x54,0x6c,0x00], // b
  [0x7c,0x44,0x44,0x44,0x44,0x00], // c
  [0x7c,0x44,0x44,0x44,0x38,0x00], // d
  [0x7c,0x54,0x54,0x54,0x44,0x00], // e
  [0x7c,0x14,0x14,0x14,0x04,0x00], // f
  [0x7c,0x44,0x44,0x54,0x74,0x00], // g
  [0x7c,0x10,0x10,0x10,0x7c,0x00], // h
  [0x44,0x44,0x7c,0x44,0x44,0x00], // i
  [0x60,0x40,0x40,0x44,0x7c,0x00], // j
  [0x7c,0x10,0x10,0x28,0x44,0x00], // k
  [0x7c,0x40,0x40,0x40,0x40,0x00], // l
  [0x7c,0x08,0x10,0x08,0x7c,0x00], // m
  [0x7c,0x08,0x10,0x20,0x7c,0x00], // n
  [0x38,0x44,0x44,0x44,0x38,0x00], // o
  [0x7c,0x14,0x14,0x14,0x08,0x00], // p
  [0x3c,0x24,0x64,0x24,0x3c,0x00], // q
  [0x7c,0x14,0x14,0x14,0x68,0x00], // r
  [0x5c,0x54,0x54,0x54,0x74,0x00], // s
  [0x04,0x04,0x7c,0x04,0x04,0x00], // t
  [0x7c,0x40,0x40,0x40,0x7c,0x00], // u
  [0x0c,0x30,0x40,0x30,0x0c,0x00], // v
  [0x3c,0x40,0x30,0x40,0x3c,0x00], // w
  [0x44,0x28,0x10,0x28,0x44,0x00], // x
  [0x0c,0x10,0x60,0x10,0x0c,0x00], // y
  [0x44,0x64,0x54,0x4c,0x44,0x00], // z
  [0x10,0x7c,0x44,0x00,0x00,0x00], // {
  [0x6c,0x00,0x00,0x00,0x00,0x00], // |
  [0x44,0x7c,0x10,0x00,0x00,0x00], // }
  [0x02,0x01,0x02,0x01,0x00,0x00], // ~
  [0x00,0x00,0x00,0x00,0x00,0x00]
]
